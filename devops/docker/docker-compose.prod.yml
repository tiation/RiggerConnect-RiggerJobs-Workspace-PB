version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: rigger-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: rigger_prod
      POSTGRES_USER: rigger_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - rigger-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rigger_user -d rigger_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: rigger-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - rigger-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  rigger-backend:
    build:
      context: ../..
      dockerfile: devops/docker/rigger-backend.Dockerfile
    container_name: rigger-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://rigger_user:${POSTGRES_PASSWORD}@postgres:5432/rigger_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      EMAIL_FROM: ${EMAIL_FROM}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      CORS_ORIGIN: ${FRONTEND_URL}
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rigger-network
    volumes:
      - uploads_data:/app/uploads
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # RiggerConnect Web App
  rigger-connect-web:
    build:
      context: ../..
      dockerfile: devops/docker/rigger-connect-web.Dockerfile
    container_name: rigger-connect-web
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: ${API_URL}
      NEXT_PUBLIC_SUPABASE_URL: ${SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      NEXT_PUBLIC_STRIPE_PUBLIC_KEY: ${STRIPE_PUBLIC_KEY}
    ports:
      - "3000:80"
    depends_on:
      - rigger-backend
    networks:
      - rigger-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # RiggerHire Staff Web App  
  rigger-hire-staff:
    build:
      context: ../..
      dockerfile: devops/docker/rigger-hire-staff.Dockerfile
    container_name: rigger-hire-staff
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: ${API_URL}
      NEXT_PUBLIC_SUPABASE_URL: ${SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
    ports:
      - "3002:3000"
    depends_on:
      - rigger-backend
    networks:
      - rigger-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: rigger-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - rigger-backend
      - rigger-connect-web
      - rigger-hire-staff
    networks:
      - rigger-network

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: rigger-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - rigger-network

  grafana:
    image: grafana/grafana:latest
    container_name: rigger-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - rigger-network

  # Log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: rigger-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - rigger-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: rigger-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config:/usr/share/logstash/config
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - rigger-network

volumes:
  postgres_data:
  redis_data:
  uploads_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  nginx_logs:

networks:
  rigger-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
